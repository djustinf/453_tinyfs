Team members: Adair Camacho (acamac03@calpoly.edu), Daniel Justin Foxhoven (dfoxhove@calpoly.edu), Geoff Wacker (gwacker@calpoly.edu)

Our implementation:
    Superblock (has to be at block 0):
        Byte 0: block type = 1
        Byte 1: "magic number" = 0x44
        Byte 2: first free block address or null if none
        Byte 3: first inode address or null if none
        Byte 4: number of available blocks

    Inode (Beginning of a file):
        Byte 0: block type = 2
        Byte 1: "magic number" = 0x44
        Byte 2: points to first file extent
        Byte 3: R/W
        Byte 4: EMPTY
        Byte 5-12: file name
        Byte 13: null term
        Byte 14: file size (in blocks)
        Byte 18-26: Creation timestamp
        Byte 26-34: Last modified timestamp
        Byte 34-42: Last accessed timestamp
        
    File Extent (Contains file data):
        Byte 0: block type = 3
        Byte 1: "magic number" = 0x44
        Byte 2: points to next file extent or NULL if last one
        Byte 3: EMPTY
        Byte 4-255: Content

    Free (Free block):
        Byte 0: block type = 4
        Byte 1: "magic number" = 0x44
        Byte 2: points to next free block or NULL if last one

Additional functionality:
    1. Directory listing and renaming: Renaming a file requires the file to be open. Once this
    condition is met however, the operation is relatively trivial. Rename simply moves the given
    string into the name position in the inode given. The readdir operation simply lists off all
    files by iterating through the disk and taking note of all inodes. It then prints out the
    names of every file in addition to the size of the corresponding file.
    
    2. Read-only and writeByte support: Bytes 3 of the inode block stores the file permission, a 
    value of 1 gives a file read-write permssion while a value of 0 gives it a read-only permission.
    The files are initially given read-write permisson but users can change the pemission to read-only 
    by calling the tfs_makeRO function and passing in the file name. When a file has read-only permission,
    calls to writeByte, tfs_writeFile, and tfs_deleteFile will fail. Conversely, if a user wants to change
    a file's permission to read-write they can call tfs_makeRW and pass in the file name.
    
    3. Timestamps: Bytes 18-42 of the inode are used to store three time_t values representing
    the creation time, last modified time, and last accessed time. tfs_readFileInfo
    will return the creation time of a given file. We tested this functionality in
    the demo file by grabbing the time right before a file is created, then created
    the file, and then called tfs_readFileInfo on that file to retrieve the creation
    time. Our demo shows that both times match, as expected.

    4. Fragmentation info and defragmentation: tfs_displayFragments was implemented
    to display a visual representation of the file system. It simply loops through
    all of the memory all prints out a visual representation for every block. To
    test this, we call displayFragments after we've opened three files, and it
    correctly prints out the superblock, three inodes, and three file extents, 
    with the rest of the blocks being free. 

Limitations/Bugs:
    - Disk size: Due to the use of unsigned characters in storing file references, the disk cannot
    be larger than 256 blocks. This allows a reference to each block to be stored in a single byte
    rather than requiring the 4 bytes to store an integer.

    - 
